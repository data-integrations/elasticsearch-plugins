<?xml version="1.0" encoding="UTF-8" ?>
<project name="maven-antrun-" default="main"  >
<target name="main">
  <script language="javascript">// for some reason, project.basedir evaluates to null if we just get the property here.
                  // so we set main.basedir to project.basedir in the pom properties, then main.basedir is used here
                  // where it evaluates correctly for whatever reason
                  var baseDir = project.getProperty(&quot;main.basedir&quot;);
                  var targetDir = project.getProperty(&quot;project.build.directory&quot;);
                  var artifactId = project.getProperty(&quot;project.artifactId&quot;);
                  var version = project.getProperty(&quot;project.version&quot;);

                  var cfgFile = new java.io.File(targetDir, artifactId + &quot;-&quot; + version + &quot;.json&quot;);
                  if (!cfgFile.exists()) {
                    cfgFile.createNewFile();
                  }

                  var parents = project.getProperty(&quot;app.parents&quot;).split(&quot;,&quot;);
                  var config = {
                    &quot;parents&quot;: [ ],
                    &quot;properties&quot;: {}
                  }
                  for (i = 0; i &lt; parents.length; i+=2) {
                    // because name1[lo,hi],name2[lo,hi] gets split into &quot;name1[lo&quot;, &quot;hi]&quot;, &quot;name2[lo&quot;, &quot;hi]&quot;
                    // so we have to combine them again
                    config.parents.push(parents[i] + &quot;,&quot; + parents[i+1]);
                  }

                  // look in widgets directory for widget config for each plugin
                  var widgetsDir = new java.io.File(baseDir, project.getProperty(&quot;widgets.dir&quot;));
                  if (widgetsDir.isDirectory()) {
                    var widgetsFiles = widgetsDir.listFiles();
                    for (i = 0; i &lt; widgetsFiles.length; i++) {
                      var widgetsFile = widgetsFiles[i];
                      if (widgetsFile.isFile()) {
                        var propertyName = &quot;widgets.&quot; + widgetsFile.getName();
                        // if the filename ends with .json
                        if (propertyName.indexOf(&quot;.json&quot;, propertyName.length - 5) !== -1) {
                          // strip the .json
                          propertyName = propertyName.slice(0, -5);
                          var contents = new java.lang.String(java.nio.file.Files.readAllBytes(widgetsFile.toPath()), java.nio.charset.StandardCharsets.UTF_8);
                          var contentsAsJson = JSON.parse(contents);
                          config.properties[propertyName] = JSON.stringify(contentsAsJson);
                        }
                      }
                    }
                  }

                  // look in the docs directory for docs for each plugin
                  var docsDir = new java.io.File(baseDir, project.getProperty(&quot;docs.dir&quot;));
                  if (docsDir.isDirectory()) {
                    var docFiles = docsDir.listFiles();
                    for (i = 0; i &lt; docFiles.length; i++) {
                      var docFile = docFiles[i];
                      if (docFile.isFile()) {
                        var propertyName = &quot;doc.&quot; + docFile.getName();
                        // if the filename ends with .md
                        if (propertyName.indexOf(&quot;.md&quot;, propertyName.length - 3) !== -1) {
                          // strip the extension
                          propertyName = propertyName.slice(0, -3);
                          var contents = new java.lang.String(java.nio.file.Files.readAllBytes(docFile.toPath()), java.nio.charset.StandardCharsets.UTF_8);
                          config.properties[propertyName] = contents + &quot;&quot;;
                        }
                      }
                    }
                  }

                  var fw = new java.io.BufferedWriter(new java.io.FileWriter(cfgFile.getAbsoluteFile()));
                  fw.write(JSON.stringify(config, null, 2));
                  fw.close();</script>
</target>
</project>